import { apiCall } from './apiClient'; // Import the generic apiCall function
import { TokenResponse } from '@/packages/shared/src/types/auth'; // Import TokenResponse

// --- Auth ---
/**
 * Authenticates an employee with email and password.
 * @param {string} email - The employee's email.
 * @param {string} password - The employee's password.
 * @returns {Promise<TokenResponse>} A promise that resolves to the authentication tokens.
 */
export async function loginEmployee(data: { email: string; password: string }): Promise<TokenResponse> {
  return apiCall('/auth/login/employee', {
    method: 'POST',
    body: JSON.stringify(data),
  });
}

// --- Ticket Operations ---
/**
 * Represents a ticket to be created.
 */
export interface Ticket {
  id?: string; // ID might be generated by backend
  type: string;
  amount: number;
  // Add other ticket properties as needed
}

/**
 * Creates a new ticket.
 * @param {Ticket} data - The ticket data to create.
 * @returns {Promise<Ticket>} A promise that resolves to the created ticket object.
 */
export async function createTicket(data: Ticket): Promise<Ticket> {
    return apiCall('/tickets', {
        method: 'POST',
        body: JSON.stringify(data),
    });
}

// --- QR Code Validation ---
/**
 * Represents the result of a QR code validation.
 */
export interface QRCodeValidationResult {
  isValid: boolean;
  data: string;
  // Add other validation result properties as needed
}

/**
 * Validates a QR code.
 * @param {string} qrCode - The QR code string to validate.
 * @returns {Promise<QRCodeValidationResult>} A promise that resolves to the validation result.
 */
export async function validateQRCode(qrCode: string): Promise<QRCodeValidationResult> {
    return apiCall('/qr/validate', {
        method: 'POST',
        body: JSON.stringify({ qrCode }),
    });
}
